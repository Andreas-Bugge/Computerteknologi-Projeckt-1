#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #
# Authors: Andreas Bugge & Mathies Schou #

# Importing the necessary libraries
import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import smbus2
import time

# Global Variables
LINEAR_VEL = 0.22
STOP_DISTANCE = 0.05
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
TURNING_DISTANCE = 0.3
COLLISION_DISTANCE = 0.09


# Class for obstacle dection.
class Obstacle():

    # Setting up interactions with the ROS-system.
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()

    # Function for setting up a scan filter array that gets us information from the lidar.  
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
        scan_filter = list(scan.ranges[0:359])
        # Sorts out all invalid, NaN and zeros from our scan_filter       
        for i in range(len(scan_filter)):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 3.5
            # If the scan_filter is zero, we have a collision
            elif scan_filter[i] == 0:
                scan_filter[i] = 3.5
        
        # Makes the front cones that the turtlebot uses detection indicators
        Left_front_cone = scan_filter[0:10]
        Right_front_cone = scan_filter[350:359]
        Front_cone = Left_front_cone + Right_front_cone
        Front_cone = min(Front_cone)
        Front_Left_cone = min(scan_filter[11:31])
        Front_Right_cone = min(scan_filter[329:349])
        Backing_cone = min(scan_filter[170:190])
        Left_cone = min(scan_filter[32:60])
        Right_cone= min(scan_filter[300:328])

        return Front_cone, Front_Left_cone, Front_Right_cone, Backing_cone, Left_cone, Right_cone

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True

        # Initial stats for the program
        Victims_found = 0
        Collision_counter = 0
        Accumulated_speed = 0
        Speed_updates = 0

        # Runtime
        Run_time = 60 * 2
        End_run = time.time() + Run_time
    
        # Turtlebot is moving forward
        def Forward (speed):
            twist = Twist()
            twist.linear.x = speed
            twist.angular.z = 0.0
            self._cmd_pub.publish(twist)
            rospy.loginfo('Moving forward!')

        # Turning turtlebot to the right
        def Turn_right (speed,turn):
            twist = Twist()   
            twist.linear.x = speed
            twist.angular.z = -turn
            self._cmd_pub.publish(twist)
            rospy.loginfo('Turning to right!')

        # Turning turtlebot to the left
        def Turn_left (speed, turn):
            twist = Twist()   
            twist.linear.x = speed
            twist.angular.z = turn
            self._cmd_pub.publish(twist)
            rospy.loginfo('Turning to left!')

        # Turtlebot is backing up
        def Backing (speed, time):
            twist = Twist()   
            twist.linear.x = speed
            twist.angular.z = 0.0
            self._cmd_pub.publish(twist)
            rospy.loginfo('Backing! %f', Backing_cone)

        # Turning around in case of encirclement
        def Turning_around (turn):
            twist = Twist()
            twist.linear.x = 0.0
            twist.angular.z = turn
            self._cmd_pub.publish(twist)
            rospy.loginfo('Turning around!') 

        # All the logic for obstacle avoidance
        while not rospy.is_shutdown():
            Front_cone, Front_Left_cone, Front_Right_cone, Backing_cone, Left_cone, Right_cone = self.get_scan()
            
            # If turtlebot is in motion.
            if turtlebot_moving:
                if Front_cone > TURNING_DISTANCE:
                    # If there is a clear way ahead, turtlebot will move forward.
                    Forward(LINEAR_VEL)
                # If it is possible to make a SOFTTURN
                elif Front_cone <= TURNING_DISTANCE:
                    # If there is more space to the right than to the left, turtlebot will turn right.
                    if Front_Left_cone < Front_Right_cone:
                        Turn_right(0.4 * LINEAR_VEL, 0.95)
                        # If there more space to the left than to the right, turtlebot will turn left.
                    elif Front_Left_cone >= Front_Left_cone:
                        Turn_left(0.4 * LINEAR_VEL, 0.95)  
                # If it is possible to make a HARD TURN
                elif Front_cone <= 0.19:
                    # If there is more space to the right than to the left, turtlebot will turn right.
                    if Front_Left_cone < Front_Right_cone:
                        Turn_right(0.2 * LINEAR_VEL, 1.9)
                        # If there more space to the left than to the right, turtlebot will turn left.
                    elif Front_Left_cone >= Front_Left_cone:
                        Turn_left(0.2 * LINEAR_VEL, 1.9)
                # in case of the robot going too close to an obstacle
                elif Front_cone <= COLLISION_DISTANCE:
                        turtlebot_moving = False
            # If turtlebot is NOT moving
            else:
                # If there is a collision, we need to back up untill it is possible to make a sharp turn.
                while Front_cone <= 0.2:
                    Backing(-0.4 * LINEAR_VEL, 0.5)
                    rospy.sleep(0.5)
                    rospy.loginfo('Distance in front %f', Front_cone)
                    turtlebot_moving = True

            
                    
                    
                        

            # Updates the stats
            Accumulated_speed += abs(twist.linear.x)
            Speed_updates += 1

            # Stats after runtime
            rospy.loginfo('----RUNTIME STATS----')
            rospy.loginfor('Runtime: %i', Run_time)
            rospy.loginfo('Victims found %f', Victims_found)
            rospy.loginfo('Average speed: %f', Accumulated_speed/Speed_updates)  
            rospy.loginfo('Total Collision counters: %f', Collision_counter)

def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()